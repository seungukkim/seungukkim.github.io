{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/06/17/hello-world/"},{"title":"Day-1 Visualization","text":"R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com. When you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this: 1summary(cars) 1234567## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 Including PlotsYou can also embed plots, for example: Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. ggplot2 시각화 다음과 같이 시각화를 작성한다. 1234library(ggplot2)ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point()","link":"/2022/06/17/day0617/"},{"title":"test","text":"##csv 파일 불러오기-csv 파일을 불러옵니다. 12mpg1&lt;-read.csv(&quot;mpg1.csv&quot;)str(mpg1) 123456## 'data.frame': 234 obs. of 5 variables:## $ manufacturer: chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... ##데이터 시각화 하기-cty,hwy 산점도를 그려본다. 1234library(ggplot2)ggplot(mpg1,aes(x=cty, y=hwy))+ geom_point()","link":"/2022/06/20/test/"},{"title":"test2","text":"이 상황에서 knit를 누른다(그림은 눌린 이후의 상태이다.) 가장 중요한 것은 mpg1.csv와 testRMd 가 같이 있어야한다. rmd_0620에 있는 test_files 안에 있는 이미지 파일을 복사한다. 그리고 blog ⇒ source⇒ images ⇒rmd_0620에 붙여 넣는다. 그리고 test(Markdown 원본 파일)을 blog ⇒ source⇒_posts 안에 넣는다. 원래 test md에 있는 이미지의 경로를 지우고, images 안에 있는 unnamed-chunk의 경로를 넣는다.","link":"/2022/06/20/test2/"},{"title":"day0621","text":"##빈도의 12mpg1&lt;-read.csv(&quot;mpg1.csv&quot;, stringsAsFactors = F)str(mpg1) 123456## 'data.frame': 234 obs. of 5 variables:## $ manufacturer: chr &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; ...## $ trans : chr &quot;auto&quot; &quot;manual&quot; &quot;manual&quot; &quot;auto&quot; ...## $ drv : chr &quot;f&quot; &quot;f&quot; &quot;f&quot; &quot;f&quot; ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ... #1. iris 데이터세트에 있는 변수 Petal.Width의 평균, 최댓값, 최솟값을 구해보세요. 1mean(iris$Petal.Width) 1## [1] 1.199333 1max(iris$Petal.Width) 1## [1] 2.5 1min(iris$Petal.Width) 1## [1] 0.1 #2. ggplot2 패키지에 있는 mpg 데이터세트에서 자동차 class의 자동차 빈도수와 비율을 구하세요. 비율은 백분율이며, 소수점 한자리까지 구합니다. 123library(ggplot2)c&lt;-table(mpg$class)round(prop.table(c)*100,1) 123## ## 2seater compact midsize minivan pickup subcompact suv ## 2.1 20.1 17.5 4.7 14.1 15.0 26.5 #3. mpg에서 자동차 class에 따른 drv의 빈도와 백분율을 구합니다. 조건은 class 별로 drv의 백분율을 계산합니다. 소수점 한자리까지 구합니다. 123library(ggplot2)d&lt;-table(mpg$class,mpg$drv)round(prop.table(d)*100,1) 123456789## ## 4 f r## 2seater 0.0 0.0 2.1## compact 5.1 15.0 0.0## midsize 1.3 16.2 0.0## minivan 0.0 4.7 0.0## pickup 14.1 0.0 0.0## subcompact 1.7 9.4 3.8## suv 21.8 0.0 4.7 #summary 1summary(iris) 1234567891011121314## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 1summary(iris$Petal.Width) 12## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.100 0.300 1.300 1.199 1.800 2.500 #quantile(), IQR 1quantile(mtcars$mpg) 12## 0% 25% 50% 75% 100% ## 10.400 15.425 19.200 22.800 33.900 1IQR(mtcars$mpg) 1## [1] 7.375","link":"/2022/06/21/day0621/"},{"title":"day0622","text":"##라이브러리 불러오기 1library(dplyr) 12## ## 다음의 패키지를 부착합니다: 'dplyr' 123## The following objects are masked from 'package:stats':## ## filter, lag 123## The following objects are masked from 'package:base':## ## intersect, setdiff, setequal, union 1library(ggplot2) ##데이터를 불러오세요 1getwd() 1## [1] &quot;C:/Users/human/Desktop/R_lecture/day0622&quot; 12exam_na&lt;-read.csv(&quot;../data/exam_na.csv&quot;) is.na(exam_na) 123456## id sex korean english math## [1,] FALSE FALSE FALSE TRUE FALSE## [2,] FALSE FALSE FALSE FALSE FALSE## [3,] FALSE FALSE FALSE FALSE FALSE## [4,] FALSE FALSE TRUE FALSE FALSE## [5,] FALSE FALSE FALSE TRUE FALSE ##결측치의 빈도를 구하기#데이터세트 전체의 결측치 빈도를 확인#korean 변수의 결측치 빈도를 확인 1table(is.na(exam_na)) 123## ## FALSE TRUE ## 22 3 1table(is.na(exam_na$korean)) 123## ## FALSE TRUE ## 4 1 1summary(is.na(exam_na)) 12345678## id sex korean english ## Mode :logical Mode :logical Mode :logical Mode :logical ## FALSE:5 FALSE:5 FALSE:4 FALSE:3 ## TRUE :1 TRUE :2 ## math ## Mode :logical ## FALSE:5 ## 1summary(exam_na) 12345678## id sex korean english math ## Min. :1 Length:5 Min. :87.00 Min. :84.00 Min. :80.0 ## 1st Qu.:2 Class :character 1st Qu.:87.00 1st Qu.:88.00 1st Qu.:82.0 ## Median :3 Mode :character Median :89.50 Median :92.00 Median :88.0 ## Mean :3 Mean :90.25 Mean :90.33 Mean :86.6 ## 3rd Qu.:4 3rd Qu.:92.75 3rd Qu.:93.50 3rd Qu.:90.0 ## Max. :5 Max. :95.00 Max. :95.00 Max. :93.0 ## NA's :1 NA's :2 ##결측치 처리 방법-제거하고 처리하기 -다른 값으로 대체하기 +평균 입력 (1) 결측치를 제외하고 분석하기na.rm = T#제거해라na.rm = F #제거하지마라 1mean(exam_na$korean,na.rm = T) #결측치를 제거하고 평균을 구해라 1## [1] 90.25 -na.omit()-결측치가 있는 행을 모두 제거.+가급적 쓰지 말것 -filter() 활용 1exam_na %&gt;% filter(is.na(korean)) 12## id sex korean english math## 1 4 M NA 84 80 1exam_na %&gt;% filter(!is.na(korean)) 12345## id sex korean english math## 1 1 M 87 NA 82## 2 2 F 92 95 93## 3 3 F 95 92 90## 4 5 F 87 NA 88 ###결측치를 다른 값으로 대체하기-imputation 결측치 제거, 대체 링크 ##이상치-데이터의 특정 값이 뭔가 ‘이상’이 있다.-Case 1: 정해진 범주에서 벗어난 데이터 +2000년 4월 30일 / 2000년 40월 30일 —-&gt;9999로 처리하자-Case 2: 숫자 / 아웃라이어(Outlier) / 극단값 12mpg1_out &lt;-read.csv(&quot;../data/mpg1_out.csv&quot;)glimpse(mpg1_out) 12345## Rows: 234## Columns: 3## $ trans &lt;int&gt; 1, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 3, 1, 1…## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;5&quot;,…## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 15, 15, … -trans의 갯수를 구하자 1table(mpg1_out$trans) 123## ## 1 2 3 ## 154 76 4 -ifelse-만약 ~라면, 내가 무엇을 할 것이다.-만약 trans의 값이 3이라면, 결측치로 바꿔주세요. 나머지는 그대로 유지하세요 12mpg1_out$trans&lt;-ifelse(mpg1_out$trans==3,NA,mpg1_out$trans)table(is.na(mpg1_out$trans)) 123## ## FALSE TRUE ## 230 4 -결측치 제거 12result&lt;-mpg1_out %&gt;% filter(!is.na(trans))table(is.na(result$trans)) 123## ## FALSE ## 230 1mpg1_out %&gt;% filter(trans!=3) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231## trans drv cty## 1 1 f 18## 2 2 f 21## 3 2 f 20## 4 1 f 21## 5 1 f 16## 6 2 f 18## 7 1 f 18## 8 2 4 18## 9 1 4 16## 10 2 4 20## 11 1 4 19## 12 1 4 15## 13 2 5 17## 14 1 4 17## 15 2 4 15## 16 1 4 15## 17 1 4 17## 18 1 4 16## 19 1 r 14## 20 1 r 14## 21 1 r 13## 22 1 r 12## 23 2 r 16## 24 1 r 15## 25 2 r 16## 26 1 r 15## 27 1 4 14## 28 1 4 11## 29 1 4 11## 30 1 4 14## 31 1 f 19## 32 1 f 22## 33 1 f 18## 34 1 f 18## 35 1 f 17## 36 1 f 18## 37 1 f 17## 38 1 f 16## 39 1 f 16## 40 1 f 17## 41 1 f 17## 42 1 f 11## 43 1 f 15## 44 1 f 16## 45 1 f 16## 46 2 4 15## 47 1 4 14## 48 1 4 13## 49 2 4 14## 50 1 4 14## 51 1 4 14## 52 1 5 9## 53 2 4 11## 54 1 4 11## 55 1 4 13## 56 1 4 13## 57 1 4 9## 58 1 4 11## 59 1 4 13## 60 1 4 11## 61 2 4 12## 62 1 4 9## 63 1 4 13## 64 1 4 13## 65 2 4 12## 66 2 4 9## 67 1 4 11## 68 2 4 11## 69 1 4 13## 70 1 4 11## 71 1 r 11## 72 1 r 11## 73 1 r 12## 74 1 4 14## 75 2 4 15## 76 1 4 14## 77 1 4 13## 78 1 4 13## 79 1 5 13## 80 1 4 14## 81 2 4 14## 82 2 4 13## 83 1 4 13## 84 1 4 13## 85 1 4 11## 86 1 4 13## 87 2 r 18## 88 1 r 18## 89 2 r 17## 90 1 r 16## 91 1 r 15## 92 2 r 15## 93 2 r 15## 94 1 r 15## 95 2 r 14## 96 2 f 28## 97 1 f 24## 98 2 f 25## 99 2 f 23## 100 1 f 24## 101 2 f 26## 102 1 f 25## 103 1 f 24## 104 2 f 21## 105 1 f 18## 106 2 f 18## 107 1 f 21## 108 2 f 21## 109 1 f 18## 110 2 f 18## 111 1 f 19## 112 1 f 19## 113 2 f 19## 114 2 f 20## 115 1 f 20## 116 1 f 17## 117 2 f 16## 118 2 f 17## 119 1 4 17## 120 1 4 15## 121 1 4 15## 122 1 4 14## 123 1 4 9## 124 1 4 14## 125 1 4 13## 126 1 4 11## 127 1 4 11## 128 1 4 12## 129 1 4 12## 130 1 4 11## 131 1 r 11## 132 1 r 11## 133 1 r 12## 134 1 4 14## 135 1 4 13## 136 1 4 13## 137 1 4 13## 138 2 f 21## 139 1 f 19## 140 1 f 23## 141 2 f 23## 142 2 f 19## 143 1 f 19## 144 1 f 18## 145 2 f 19## 146 1 f 19## 147 1 4 14## 148 2 4 15## 149 1 4 14## 150 1 4 12## 151 1 f 18## 152 1 f 16## 153 1 f 17## 154 1 f 18## 155 1 f 16## 156 2 4 18## 157 1 4 18## 158 2 4 20## 159 2 4 19## 160 1 4 20## 161 1 4 18## 162 1 4 21## 163 2 4 19## 164 2 4 19## 165 1 4 19## 166 1 4 20## 167 1 4 20## 168 2 4 19## 169 2 4 20## 170 2 4 15## 171 1 4 16## 172 1 4 15## 173 2 4 15## 174 1 4 16## 175 1 4 14## 176 2 f 21## 177 1 f 21## 178 2 f 21## 179 1 f 21## 180 1 f 18## 181 2 f 18## 182 1 f 19## 183 1 f 21## 184 2 f 21## 185 2 f 21## 186 1 f 22## 187 1 f 18## 188 2 f 18## 189 1 f 18## 190 1 f 24## 191 1 f 24## 192 2 f 26## 193 2 f 28## 194 1 f 26## 195 1 4 11## 196 1 4 13## 197 2 4 15## 198 1 4 16## 199 2 4 17## 200 2 4 15## 201 1 4 15## 202 2 4 15## 203 1 4 16## 204 2 f 21## 205 1 f 19## 206 2 f 21## 207 1 f 22## 208 2 f 17## 209 2 f 33## 210 2 f 21## 211 1 f 19## 212 1 f 22## 213 2 f 21## 214 1 f 21## 215 2 f 21## 216 1 f 16## 217 2 f 17## 218 2 f 35## 219 1 f 29## 220 2 f 21## 221 1 f 19## 222 2 f 20## 223 1 f 20## 224 2 f 21## 225 1 f 18## 226 1 f 19## 227 2 f 21## 228 1 f 16## 229 2 f 18## 230 1 f 17 ###극단치 처피-숫자 데이터 boxplot()-boxplot() 함수를 통해서 극단치가 있는지 없는지 확인 가능-IQR:3사분위 - 1사부누이-경계값: IQR+ IQR * 1.5 상한 / IQR-IQR * 1.5 하한 123mpg1&lt;-read.csv(&quot;../data/mpg1.csv&quot;)boxplot(mpg1$cty)boxplot(mpg1$cty)$stats 123456## [,1]## [1,] 9## [2,] 14## [3,] 17## [4,] 19## [5,] 26 1boxplot(mpg1$cty, mpg1$hwy)$stats 123456## [,1] [,2]## [1,] 9 12## [2,] 14 18## [3,] 17 24## [4,] 19 27## [5,] 26 37 1boxplot(mpg1$cty~mpg1$drv)$stats 123456## [,1] [,2] [,3]## [1,] 9 15 11## [2,] 13 18 12## [3,] 14 19 15## [4,] 16 21 15## [5,] 20 25 18 12mpg1$cty&lt;-ifelse(mpg1$cty&gt;26|mpg1$cty&lt;9,NA,mpg1$cty)table(is.na(mpg1$cty)) 123## ## FALSE TRUE ## 229 5 1mean(mpg1$cty,na.rm=T) 1## [1] 16.55895 ##ggplot2 강의-데이터 불러오기 12345678library(readxl)library(ggplot2)who_disease&lt;-read_xlsx(&quot;../data/who_disease.xlsx&quot;)#기본 시각화ggplot(who_disease, aes(x=year,y=cases))+ #그래프의 종류 geom_point(alpha=0.1) 1234#옵션ggplot(who_disease, aes(x=year,y=cases))+ #그래프의 종류 geom_point(alpha=0.1) 1234#옵션 2 색상ggplot(who_disease, aes(x=year,y=cases))+ #그래프의 종류 geom_point(alpha=0.1,colour=&quot;red&quot;) 1234#옵션 2 색상ggplot(who_disease, aes(x=year,y=cases))+ #그래프의 종류 geom_point(alpha=0.1,colour=&quot;12E6c2&quot;,) =colour 입력 위치=geom_point(colour) +aes(x,y,colour =컬럼) 1str(iris) 123456## 'data.frame': 150 obs. of 5 variables:## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 1234ggplot(iris,aes(x=Sepal.Length, y=Sepal.Width, size=Petal.Length))+ geom_point() #산점도: x축 수치형 연속형 데이터, y축 수치형 연속형 데이터# 12ggplot(who_disease,aes(x=year,y=cases))+ geom_point(alpha=0.1) #히스토그램+질병데이터 region=AMR, year=1980,disease, 백일해 12library(dplyr)str(who_disease) 1234567## tibble [43,262 × 6] (S3: tbl_df/tbl/data.frame)## $ region : chr [1:43262] &quot;EMR&quot; &quot;EUR&quot; &quot;AFR&quot; &quot;EUR&quot; ...## $ countryCode: chr [1:43262] &quot;AFG&quot; &quot;ALB&quot; &quot;DZA&quot; &quot;AND&quot; ...## $ country : chr [1:43262] &quot;Afghanistan&quot; &quot;Albania&quot; &quot;Algeria&quot; &quot;Andorra&quot; ...## $ disease : chr [1:43262] &quot;measles&quot; &quot;measles&quot; &quot;measles&quot; &quot;measles&quot; ...## $ year : num [1:43262] 2016 2016 2016 2016 2016 ...## $ cases : num [1:43262] 638 17 41 0 53 0 0 2 99 27 ... 123456who_disease %&gt;% filter(region=='AMR', year==1980, disease=='pertussis', cases&gt;0)-&gt;data2ggplot(data2,aes(x=cases))+ geom_histogram(fill=&quot;red&quot;) 1## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 123ggplot(data2,aes(x=country, y=cases))+ geom_col(fill=&quot;blue&quot;)+ coord_flip() 12ggplot(who_disease,aes(region))+ geom_bar() 12ggplot(who_disease,aes(disease))+ geom_bar() 123library(ggplot2)diamonds&lt;-ggplot2::diamondsggplot(diamonds,aes(x=carat,y=price)) 1ggplot(diamonds,aes(x=carat,y=price))+geom_point() 12ggplot(diamonds, aes(x=cut))+ geom_bar() #table()함수로 cut별 빈도수를 확인 1table(diamonds$cut) 123## ## Fair Good Very Good Premium Ideal ## 1610 4906 12082 13791 21551 12ggplot(diamonds,aes(x=cut,y=price))+ geom_bar(stat=&quot;identity&quot;) #cut 범주별 평균 가격 구하기 1234cut_price&lt;-diamonds %&gt;% group_by(cut) %&gt;% summarise(mean_price=mean(price))cut_price 12345678## # A tibble: 5 × 2## cut mean_price## &lt;ord&gt; &lt;dbl&gt;## 1 Fair 4359.## 2 Good 3929.## 3 Very Good 3982.## 4 Premium 4584.## 5 Ideal 3458. 12ggplot(data=cut_price,aes(x=cut,y=mean_price))+ geom_col() 12ggplot(data=diamonds,aes(x=carat))+ geom_histogram() 1## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 1range(diamonds$carat) 1## [1] 0.20 5.01 12ggplot(diamonds,aes(x=carat))+ geom_histogram(binwidth = 1) 12ggplot(diamonds,aes(x=carat))+ geom_histogram(binwidth = 0.01) 12ggplot(diamonds,aes(x=carat))+ geom_density() 12ggplot(diamonds,aes(x=1,y=price))+ geom_boxplot() 12ggplot(cars,aes(x=speed,y=dist))+ geom_line() #실업자수 변화 12ggplot(economics,aes(x=date,y=unemploy))+ geom_line() ##ggplot()정교하게 그리기 -산점도 그리기 12ggplot(diamonds, aes(x=carat, y=price, col=cut))+ geom_point() #막대그래프에 2개 범주내용 반영하기 12ggplot(diamonds, aes(x=color,fill=cut))+ geom_bar(position=&quot;fill&quot;) #p.219선 그래프에 2개 범주 내용 반영 12leisure&lt;-read.csv(&quot;../data/leisure.csv&quot;)str(leisure) 1234## 'data.frame': 200 obs. of 3 variables:## $ age : int 2 2 3 3 4 4 5 5 6 6 ...## $ sex : chr &quot;female&quot; &quot;male&quot; &quot;female&quot; &quot;male&quot; ...## $ expense: num 25.8 21 30 16.3 25.7 ... 12ggplot(leisure,aes(x=age,y=expense,col=sex))+ geom_line(size=1.2,linetype=3) #막대그래프의 순서변경-reorder() 1234567mpg1&lt;-read.csv(&quot;../data/mpg1.csv&quot;,stringsAsFactors = F)#데이터 가공drv_hwy&lt;-mpg1 %&gt;% group_by(drv) %&gt;% summarise(mean_hwy=mean(hwy))drv_hwy 123456## # A tibble: 3 × 2## drv mean_hwy## &lt;chr&gt; &lt;dbl&gt;## 1 4 19.2## 2 f 28.2## 3 r 21 123#기본 그래프ggplot(drv_hwy,aes(x=drv,y=mean_hwy))+ geom_col() 12ggplot(drv_hwy,aes(x=reorder(drv,mean_hwy),y=mean_hwy))+ geom_col() 123456789ggplot(drv_hwy,aes(x=reorder(drv,-mean_hwy),y=mean_hwy))+ geom_col()+ labs( title=&quot;그래프 제목을 입력하세요&quot;, subtitle=&quot;그래프 소제목을 입력하세요&quot;, x=&quot;x변수명을 입력하세요&quot;, y=&quot;y변수명을 입력하세요&quot;, caption=&quot;데이터 출처를 입력하세요&quot; )","link":"/2022/06/22/day0622/"},{"title":"day0623","text":"제목 1ㄴㄴㄴㄴ 소제목 1제목 2ㅁㅇㄹㅇㄹ 소제목 1-1##복습iris데이터,sepal.length,sepal.width 활용해서 종별로 산점도를 그리세요.-제목과 x축, y축을 변경하세요+x축 길이, y축 너비 12library(ggplot2)summary(iris) 1234567891011121314## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## 12ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species))+ geom_point() 123library(ggplot2)str(iris) 123456## 'data.frame': 150 obs. of 5 variables:## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 123456789101112ggplot(iris,aes(x=Sepal.Length,y=Sepal.Width, col=Species))+ geom_point()+ labs( title=&quot;제목&quot;, x=&quot;길이&quot;, y=&quot;너비&quot; )+ scale_color_manual( labels= c(&quot;setosa&quot;, &quot;vericolor&quot;,&quot;virginica&quot;), values= c(&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;) )+ theme_classic() #평균차이 검정 -가설 검정: 평균의 차이를 검정 -남자의 평균키와 여자의 평균 키는 차이가 있을 것이다. #교차분석(=빈도분석)-가설검정: 각 범주별 비도를 활용해서 관계성을 검정#단순 회귀 분석 y =ax + b y는 종속변수, x가 정해져야지 정해진다. -온도 판매량 -가설 검정 기온(독립변수)이 판매량(종속변수)에 긍정적(부정적)영향을 주고 있을 것이다. 평균차이 분석, 회귀분석 ###가설-Hypothesis—-&gt; 공부 방법: 선행 연구, 해당분석 방법의 가설 설정 예시 존재-연구: 내가 궁금한 것을 찾는 것-귀무가설: 두 그룹간의 평균 차이가 없다.-대립가설: 두 그룹간의 평균 차이가 있다. 100명 중 5명 여기서 5명을 유의수준유의수준=&gt;0.05이내면 대립가설을 지지해주기로 했다.예외가 있다.=&gt; 예외가 있음을 인정하자 -가설 검정에서 인정하는 유의수준5%, 1%, 0.1% 또는 10% -A후보 44%-B후보 42% 이재명 vs 윤형선-이재명 t.test-어떻게 데이터를 입력하는지 확인-p.value, 유의수준 0.65이상: 귀무가설, 0.05이내 –&gt; 대립 가설 1234mpg1&lt;-read.csv(&quot;../data/mpg1.csv&quot;, stringsAsFactors =F)library(ggplot2)ggplot(mpg1,aes(x=trans,y=cty))+ geom_boxplot() -t.test검정+귀무가설: auto와 manual의 cty 평균은 차이가 없다. 대립 가설:auto와 manual의 cty 평균은 차이가 있다.(보다 작으면) 1t.test(data=mpg1, cty~trans) 1234567891011## ## Welch Two Sample t-test## ## data: cty by trans## t = -4.5375, df = 132.32, p-value = 1.263e-05## alternative hypothesis: true difference in means between group auto and group manual is not equal to 0## 95 percent confidence interval:## -3.887311 -1.527033## sample estimates:## mean in group auto mean in group manual ## 15.96815 18.67532 12#종속변수~독립변수#y(반응변수)x(설명변수) -두 그룹의 평균 차이 검정 +사전 필수 검증 +등분산 검정 +두 그룹간의 분산이 비슷하면 ==&gt; t.test(모수 검정) +두 그룹간의 분산이 다르면, –&gt;비모수 검정 +등분산 검정 +귀무가설: 두 그룹간의 분산이 비슷하다. +대립가설:ㅈㄹ 1var.test(data=mpg1,cty~trans) 1234567891011## ## F test to compare two variances## ## data: cty by trans## F = 0.73539, num df = 156, denom df = 76, p-value = 0.1101## alternative hypothesis: true ratio of variances is not equal to 1## 95 percent confidence interval:## 0.4912917 1.0719468## sample estimates:## ratio of variances ## 0.7353887 12ggplot(mpg1, aes(x=cty,fill=trans))+ geom_density(alpha=0.1) 교차분석-범주형 변수들이 관계가 있다는 것을 검정-비율에 차이가 있는지 검정-교차분석 검정은 R의chisq.test() 함수로 진행-귀무가설: trans에 따라 drv(4,f,r)의 (비율)차이가 없다.-대립가설: trans에 따라 drv의 차이가 있다. #빈도표 / 비율 1table(mpg1$trans, mpg1$drv) 1234## ## 4 f r## auto 75 65 17## manual 28 41 8 비율 1prop.table(table(mpg1$trans,mpg1$drv),1) 1234## ## 4 f r## auto 0.4777070 0.4140127 0.1082803## manual 0.3636364 0.5324675 0.1038961 -auto 4륜 구동(4)인 47.8%-manual 전륜구동(f) 53.2% 가장 많음-실제로 통계적으로 봤을 때, 차이가 있는지 검정 1chisq.test(mpg1$trans,mpg1$drv) 12345## ## Pearson's Chi-squared test## ## data: mpg1$trans and mpg1$drv## X-squared = 3.1368, df = 2, p-value = 0.2084 -차이가 없다.","link":"/2022/06/23/day0623/"},{"title":"day0624","text":"-통계 검정 +평균 차이 검정: 수치 데이터 +범주 데이터(두 그룹) -세 그룹 이상 +비율 차이 검정: 범주 데이터 +상관 관계: 수치 데이터 +회귀 -통계 검정 사전 준비 +분석을 위한 데이터가 적절한지 검정 +등분산 검정(두 평균 차이 검정을 하려고 할 때, 분산이 비슷한지 확인하는 것), 수치 데이터가 정규 분포를 이루는가(정규성 검정) -귀무가설, 대립가설 적절하게 설정 +서울의 평균 임금과 부산의 평균 임금이 차이가 있을 것이다. +선행 연구(논문을 찾아서 응용) -테스트 +t.test, chisq.test, cor.test +p.value -p.value&gt;0.05 –&gt; 귀무가설을 지지 -p.value&lt;0.05 –&gt; 대립가설을 지지 ##회귀의 중요성-기초 통계 : 특정한 결과에 영향을 주는 주 요인이 뭐냐? 이걸 찾는 것이 회귀.-회귀분석과 종류 +1세대 회귀 방법론: 다항 회귀분석, 다중 회귀분석, 포아송 회귀분석 +2세대 회귀 방법론: 구조 방정식 -귀무가설&amp;대립가설 존재 +귀무가설:x(=독립 변수)가 y(=종속 변수)에 영향을 주지 않는다. +대립가설:x(=독립 변수)가 y(=종속 변수)에 영향을 준다. -lm(종속 변수 ~ 독립 변수,data) +p.value 12RA&lt;-lm(data=mtcars,mpg~disp)summary(RA) 123456789101112131415161718## ## Call:## lm(formula = mpg ~ disp, data = mtcars)## ## Residuals:## Min 1Q Median 3Q Max ## -4.8922 -2.2022 -0.9631 1.6272 7.2305 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 29.599855 1.229720 24.070 &lt; 2e-16 ***## disp -0.041215 0.004712 -8.747 9.38e-10 ***## ---## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## ## Residual standard error: 3.251 on 30 degrees of freedom## Multiple R-squared: 0.7183, Adjusted R-squared: 0.709 ## F-statistic: 76.51 on 1 and 30 DF, p-value: 9.38e-10 -머신 러닝, 인공지능 주 목적은 예측 y = ax + b ANOVA (분산 분석)식1: y=disp + var1 + var2 + var3식2: y=disp + var1 + var2 컬럼 개수가 100개-전진소거법, 후진소거법 R-squared : 결정계수= 설명력= 0~1-1로 수렴할수록 설명력이 좋다 특정한 결과에 영향을 주는 주 요인이 뭐냐? 이걸 찾는 것이 회귀 1lm(data=mtcars,mpg~disp) 1234567## ## Call:## lm(formula = mpg ~ disp, data = mtcars)## ## Coefficients:## (Intercept) disp ## 29.59985 -0.04122 1lm(formula=mpg~disp,data=mtcars) 1234567## ## Call:## lm(formula = mpg ~ disp, data = mtcars)## ## Coefficients:## (Intercept) disp ## 29.59985 -0.04122 #p-value가 0.5보다 작으면 회귀모형이 적합하다고 해석그렇지 않으면 회귀모형에 문제가 있는 것이므로 회귀분석 자체가 성립x 1lm(data= mtcars,mpg~disp+hp+wt) 1234567## ## Call:## lm(formula = mpg ~ disp + hp + wt, data = mtcars)## ## Coefficients:## (Intercept) disp hp wt ## 37.105505 -0.000937 -0.031157 -3.800891 12RA&lt;-lm(data=mtcars,mpg~disp+hp+wt)summary(RA) 1234567891011121314151617181920## ## Call:## lm(formula = mpg ~ disp + hp + wt, data = mtcars)## ## Residuals:## Min 1Q Median 3Q Max ## -3.891 -1.640 -0.172 1.061 5.861 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.105505 2.110815 17.579 &lt; 2e-16 ***## disp -0.000937 0.010350 -0.091 0.92851 ## hp -0.031157 0.011436 -2.724 0.01097 * ## wt -3.800891 1.066191 -3.565 0.00133 ** ## ---## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## ## Residual standard error: 2.639 on 28 degrees of freedom## Multiple R-squared: 0.8268, Adjusted R-squared: 0.8083 ## F-statistic: 44.57 on 3 and 28 DF, p-value: 8.65e-11 1library(dplyr) 12## ## 다음의 패키지를 부착합니다: 'dplyr' 123## The following objects are masked from 'package:stats':## ## filter, lag 123## The following objects are masked from 'package:base':## ## intersect, setdiff, setequal, union 12library(ggplot2)library(foreign) 1mental&lt;-read.spss(&quot;../data/한국행정연구원_사회통합실태조사_데이터_2019.sav&quot;) 1## re-encoding from CP51949 1class(mental)#객체 유형 확인인 1## [1] &quot;list&quot; 12mental&lt;-as.data.frame(mental)#데이터프레임으로 변환하기기class(mental) 1## [1] &quot;data.frame&quot; 1str(mental)#mental 의 구조조 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101## 'data.frame': 8000 obs. of 276 variables:## $ id : num 1 2 3 4 5 6 7 8 9 10 ...## $ ara : Factor w/ 17 levels &quot;서울&quot;,&quot;부산&quot;,..: 1 1 1 1 1 1 1 1 1 1 ...## $ wt1 : num 12216 12216 8455 7421 6474 ...## $ wt2 : num 2.58 2.58 1.79 1.57 1.37 ...## $ q1_1 : Factor w/ 12 levels &quot;0점 전혀 행복하지 않았다&quot;,..: 8 6 7 5 7 8 8 8 7 5 ...## $ q1_2 : Factor w/ 12 levels &quot;0점 전혀 하지 않았다&quot;,..: 5 5 5 4 4 4 6 6 4 6 ...## $ q1_3 : Factor w/ 12 levels &quot;0점 전혀 우울하지 않았다&quot;,..: 6 4 6 5 4 5 5 7 5 5 ...## $ q1_4 : Factor w/ 12 levels &quot;0점 전혀 만족하지 않는다&quot;,..: 5 5 5 4 7 5 6 6 5 5 ...## $ q1_5 : Factor w/ 12 levels &quot;0점 전혀 가치 없다&quot;,..: 6 4 5 4 8 7 7 6 5 4 ...## $ q2_1 : Factor w/ 11 levels &quot;0점 전혀 안전하지 않다&quot;,..: 5 6 7 5 7 8 6 7 6 6 ...## $ q2_2 : Factor w/ 11 levels &quot;0점 전혀 안전하지 않다&quot;,..: 4 7 6 4 7 7 7 5 4 5 ...## $ q2_3 : Factor w/ 11 levels &quot;0점 전혀 안전하지 않다&quot;,..: 4 7 6 5 7 5 6 4 4 6 ...## $ q3 : Factor w/ 11 levels &quot;0점 전혀 자유롭지 않다&quot;,..: 4 6 4 3 8 6 6 5 4 5 ...## $ q4 : Factor w/ 12 levels &quot;0점 매우 낮다&quot;,..: 4 6 5 4 6 7 6 4 4 6 ...## $ q5_1 : Factor w/ 5 levels &quot;전혀 그렇지 않다&quot;,..: 3 3 2 3 3 3 2 2 2 2 ...## $ q5_2 : Factor w/ 5 levels &quot;전혀 그렇지 않다&quot;,..: 2 3 3 2 2 3 3 2 1 2 ...## $ q5_2_1 : Factor w/ 5 levels &quot;전혀 그렇지 않다&quot;,..: 2 3 2 3 2 3 2 2 2 2 ...## $ q5_2_2 : Factor w/ 5 levels &quot;전혀 그렇지 않다&quot;,..: 2 4 2 2 2 2 2 2 1 2 ...## $ q5_3 : Factor w/ 5 levels &quot;전혀 그렇지 않다&quot;,..: 3 3 3 3 3 3 2 2 1 2 ...## $ q5_4 : Factor w/ 5 levels &quot;전혀 그렇지 않다&quot;,..: 2 3 2 2 3 2 2 1 1 1 ...## $ q6 : Factor w/ 11 levels &quot;0점 전혀 만족하지 않는다&quot;,..: 7 7 6 6 7 8 7 5 7 4 ...## $ q7 : Factor w/ 11 levels &quot;0점 매우 나빠질 것이다&quot;,..: 7 6 6 5 6 7 8 6 5 4 ...## $ q8 : Factor w/ 11 levels &quot;0점 전혀 만족하지 않는다&quot;,..: 6 6 6 7 6 6 7 5 5 3 ...## $ q9 : Factor w/ 11 levels &quot;0점 매우 나빠질 것이다&quot;,..: 5 6 5 7 6 6 7 5 5 3 ...## $ q10 : Factor w/ 11 levels &quot;0점 전혀 만족하지 않는다&quot;,..: 6 9 7 8 7 9 7 6 5 6 ...## $ q11 : Factor w/ 11 levels &quot;0점 매우 나빠질 것이다&quot;,..: 4 9 6 5 5 7 6 6 5 8 ...## $ q12 : Factor w/ 11 levels &quot;북한은 우리의 적이다&quot;,..: 4 4 7 6 6 7 7 7 3 7 ...## $ q13 : Factor w/ 11 levels &quot;성장이 더 중요하다&quot;,..: 4 5 6 5 7 6 6 6 3 5 ...## $ q14 : Factor w/ 11 levels &quot;공동체의 이익이 더 중요하다&quot;,..: 4 4 6 4 7 7 7 6 3 5 ...## $ q15_1 : Factor w/ 4 levels &quot;고도의 경제성장&quot;,..: 1 1 1 1 3 2 2 2 4 3 ...## $ q15_2 : Factor w/ 4 levels &quot;고도의 경제성장&quot;,..: 2 3 4 4 2 1 1 4 1 4 ...## $ q16_1 : Factor w/ 4 levels &quot;국가의 질서 유지&quot;,..: 2 2 2 2 1 2 2 2 4 2 ...## $ q16_2 : Factor w/ 4 levels &quot;국가의 질서 유지&quot;,..: 3 4 4 3 4 3 3 4 1 3 ...## $ q17_1 : Factor w/ 4 levels &quot;경제 안정&quot;,&quot;범죄와의 전쟁&quot;,..: 2 3 3 2 2 1 2 2 4 1 ...## $ q17_2 : Factor w/ 4 levels &quot;경제 안정&quot;,&quot;범죄와의 전쟁&quot;,..: 4 2 1 3 3 4 3 3 2 4 ...## $ q18_1 : Factor w/ 4 levels &quot;전혀 동의하지 않는다&quot;,..: 2 2 2 3 2 3 3 2 3 2 ...## $ q18_2 : Factor w/ 4 levels &quot;전혀 동의하지 않는다&quot;,..: 2 3 3 2 3 2 3 3 2 3 ...## $ q18_3 : Factor w/ 4 levels &quot;전혀 동의하지 않는다&quot;,..: 2 2 3 2 2 2 3 2 2 2 ...## $ q19_1 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 1 2 1 1 1 1 1 1 3 1 ...## $ q19_2 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 1 1 1 1 1 1 1 1 1 1 ...## $ q19_3 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 1 1 1 3 1 1 1 1 1 1 ...## $ q19_4 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 3 1 1 3 2 3 3 3 3 1 ...## $ q19_5 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 1 2 1 1 1 2 1 1 1 1 ...## $ q19_6 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 3 1 1 1 1 1 2 1 1 1 ...## $ q19_7 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 3 1 1 1 3 1 2 3 2 1 ...## $ q19_8 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 1 1 2 1 2 1 1 1 1 1 ...## $ q19_9 : Factor w/ 6 levels &quot;소속된 적이 없다&quot;,..: 1 1 1 1 2 1 1 2 1 1 ...## $ q20_1 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 4 4 2 4 6 2 5 4 6 5 ...## $ q20_2 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 5 3 3 5 6 3 4 5 6 4 ...## $ q20_3 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 6 3 4 4 5 2 4 4 5 5 ...## $ q20_4 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 5 4 5 3 6 2 4 5 5 4 ...## $ q20_5 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 5 2 4 4 6 2 5 5 5 4 ...## $ q20_6 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 5 2 5 3 6 3 3 5 7 4 ...## $ q20_7 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 5 3 5 3 6 2 3 5 6 3 ...## $ q20_8 : Factor w/ 8 levels &quot;1점 전혀 중요하지 않다&quot;,..: 5 3 5 3 7 2 3 5 6 3 ...## $ q21_1 : Factor w/ 5 levels &quot;전혀 동의하지 않는다&quot;,..: 4 3 3 3 4 4 4 3 4 3 ...## $ q21_2 : Factor w/ 5 levels &quot;전혀 동의하지 않는다&quot;,..: 3 3 2 3 3 4 4 4 3 2 ...## $ q21_3 : Factor w/ 5 levels &quot;전혀 동의하지 않는다&quot;,..: 3 4 3 4 3 5 4 3 4 2 ...## $ q21_4 : Factor w/ 5 levels &quot;전혀 동의하지 않는다&quot;,..: 3 3 2 3 3 4 4 3 3 2 ...## $ q22_1 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 3 1 3 1 3 1 3 4 2 ...## $ q22_2 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 2 2 3 1 3 1 2 4 2 ...## $ q22_3 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 3 2 3 3 3 3 3 4 3 ...## $ q22_4 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 3 1 2 1 3 3 3 4 2 ...## $ q22_5 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 3 3 3 1 3 3 3 4 2 ...## $ q22_6 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 4 3 3 1 3 3 4 4 3 ...## $ q22_7 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 2 3 3 1 3 2 3 4 2 ...## $ q22_8 : Factor w/ 4 levels &quot;지난 1년 동안 한 적이 있다&quot;,..: 4 2 3 3 1 1 2 3 1 2 ...## $ q23 : Factor w/ 2 levels &quot;참여했다&quot;,&quot;참여하지 않았다&quot;: 1 1 1 1 1 1 2 1 1 1 ...## $ q24 : Factor w/ 2 levels &quot;참여했다&quot;,&quot;참여하지 않았다&quot;: 1 1 1 1 1 1 2 1 1 1 ...## $ q25 : Factor w/ 2 levels &quot;참여했다&quot;,&quot;참여하지 않았다&quot;: 1 1 1 2 1 1 2 1 1 1 ...## $ q26 : Factor w/ 2 levels &quot;있다&quot;,&quot;없다&quot;: 1 1 1 1 2 1 2 1 1 2 ...## $ q27 : Factor w/ 6 levels &quot;매우 보수적&quot;,..: 1 2 2 3 4 4 3 1 2 3 ...## $ q28_1 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 2 3 2 1 3 3 3 3 3 1 ...## $ q28_2 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 2 3 3 2 2 3 3 3 2 1 ...## $ q28_3 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 2 3 2 2 3 2 4 2 2 1 ...## $ q28_4 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 2 3 2 2 2 1 3 2 2 1 ...## $ q29_1 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 3 2 2 3 2 2 2 1 4 3 ...## $ q29_2 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 3 3 3 2 2 1 2 1 3 2 ...## $ q29_3 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 3 3 2 2 3 1 2 1 3 2 ...## $ q29_4 : Factor w/ 4 levels &quot;전혀 이루어지지 않고 있다&quot;,..: 3 3 2 2 3 1 2 1 3 2 ...## $ q30_1 : Factor w/ 5 levels &quot;없다&quot;,&quot;1~2명&quot;,..: 2 3 2 3 2 2 2 2 2 1 ...## $ q30_1_1 : Factor w/ 7 levels &quot;전화&quot;,&quot;우편&quot;,..: 4 4 4 4 4 4 4 4 4 NA ...## $ q30_1_2 : Factor w/ 6 levels &quot;이메일&quot;,&quot;SNS(페이스북, 트위터, 인스타그램 등)&quot;,..: NA NA NA NA NA NA NA NA NA NA ...## $ q30_2 : Factor w/ 7 levels &quot;없다&quot;,&quot;1~2명&quot;,..: 3 4 3 3 4 2 2 3 4 2 ...## $ q30_2_1 : Factor w/ 7 levels &quot;전화&quot;,&quot;우편&quot;,..: 1 4 4 4 3 4 1 4 1 5 ...## $ q30_2_2 : Factor w/ 6 levels &quot;이메일&quot;,&quot;SNS(페이스북, 트위터, 인스타그램 등)&quot;,..: NA NA NA NA 1 NA NA NA NA NA ...## $ q31_1 : Factor w/ 5 levels &quot;없다&quot;,&quot;1~2명&quot;,..: 4 3 1 3 3 2 1 4 3 3 ...## $ q31_2 : Factor w/ 5 levels &quot;없다&quot;,&quot;1~2명&quot;,..: 3 2 1 2 3 2 1 3 2 2 ...## $ q31_3 : Factor w/ 5 levels &quot;없다&quot;,&quot;1~2명&quot;,..: 4 3 1 2 3 2 1 4 2 2 ...## $ q32_1 : Factor w/ 4 levels &quot;전혀 그렇지 않다&quot;,..: 2 2 2 2 1 2 3 3 1 2 ...## $ q32_2 : Factor w/ 4 levels &quot;전혀 그렇지 않다&quot;,..: 2 2 2 1 1 2 3 3 1 2 ...## $ q32_3 : Factor w/ 4 levels &quot;전혀 그렇지 않다&quot;,..: 2 2 2 2 1 2 3 3 1 2 ...## $ q33 : Factor w/ 5 levels &quot;전혀 믿을 수 없다&quot;,..: 2 3 2 2 3 2 2 3 3 3 ...## $ q34_1 : Factor w/ 4 levels &quot;전혀 신뢰하지 않는다&quot;,..: 3 3 2 2 4 2 2 2 4 3 ...## $ q34_2 : Factor w/ 4 levels &quot;전혀 신뢰하지 않는다&quot;,..: 2 3 2 3 3 2 2 3 3 2 ...## $ q34_3 : Factor w/ 4 levels &quot;전혀 신뢰하지 않는다&quot;,..: 2 2 2 3 2 2 1 2 3 3 ...## $ q34_4 : Factor w/ 4 levels &quot;전혀 신뢰하지 않는다&quot;,..: 2 2 2 2 1 1 2 2 2 2 ...## $ q34_5 : Factor w/ 4 levels &quot;전혀 신뢰하지 않는다&quot;,..: 2 2 2 2 2 1 2 2 2 2 ...## $ q35_1 : Factor w/ 4 levels &quot;전혀 믿지 않는다&quot;,..: 3 3 2 2 2 2 1 2 3 3 ...## [list output truncated] 12345678910111213#추출 변수(변수 설명, 척도 범위) : 영어 변수 이름mental&lt;-mental %&gt;% select(q32_2,q1_4,q32_1,q34_1, q52,d17,,d1,d2,ara) %&gt;% rename(suicide=q32_2, satisfaction=q1_4, loneliness=q32_1, family_belief=q34_1, wealth=q52, health=d17, sex=d1, age=d2, area=ara)str(mental) 12345678910## 'data.frame': 8000 obs. of 9 variables:## $ suicide : Factor w/ 4 levels &quot;전혀 그렇지 않다&quot;,..: 2 2 2 1 1 2 3 3 1 2 ...## $ satisfaction : Factor w/ 12 levels &quot;0점 전혀 만족하지 않는다&quot;,..: 5 5 5 4 7 5 6 6 5 5 ...## $ loneliness : Factor w/ 4 levels &quot;전혀 그렇지 않다&quot;,..: 2 2 2 2 1 2 3 3 1 2 ...## $ family_belief: Factor w/ 4 levels &quot;전혀 신뢰하지 않는다&quot;,..: 3 3 2 2 4 2 2 2 4 3 ...## $ wealth : Factor w/ 11 levels &quot;0점 전혀 안정적이지 않다&quot;,..: 4 7 6 6 7 7 6 5 4 6 ...## $ health : Factor w/ 5 levels &quot;매우 나쁘다&quot;,..: 4 3 4 4 4 4 4 4 4 4 ...## $ sex : Factor w/ 2 levels &quot;남성&quot;,&quot;여성&quot;: 2 2 1 2 1 2 2 1 2 1 ...## $ age : Factor w/ 5 levels &quot;19~29세&quot;,&quot;30대&quot;,..: 5 5 4 4 3 3 1 5 5 3 ...## $ area : Factor w/ 17 levels &quot;서울&quot;,&quot;부산&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... 12345678mental$suicide &lt;- as.integer(mental$suicide)mental$satisfaction&lt;- as.integer(mental$satisfaction)mental$loneliness&lt;-as.integer(mental$loneliness)mental$family_belief&lt;-as.integer(mental$family_belief)mental$wealth &lt;-as.integer(mental$wealth)mental$health&lt;-as.integer(mental$health)table(mental$suicide) 123## ## 1 2 3 4 ## 5592 1862 479 67 1table(mental$health) 123## ## 1 2 3 4 5 ## 87 509 2413 3730 1261 1table(mental$satisfaction) 123## ## 1 2 3 4 5 6 7 8 9 10 11 ## 49 79 170 302 440 2053 1611 1761 1040 321 174 #sex, age, area의 유형을 범주형에서 문자형으로 변환 12mental$satisfaction&lt;-mental$satisfaction-1mental$wealth&lt;-mental$wealth-1 #age 범주 이름 바꾸기 12mental$age&lt;-ifelse(mental$age==&quot;19~29세&quot;,&quot;20대&quot;, ifelse(mental$age==&quot;60~69&quot;,&quot;60대&quot;,mental$age)) #결측치, 이상치 확인하기 1summary(mental) 12345678910111213141516## suicide satisfaction loneliness family_belief ## Min. :1.000 Min. : 0.000 Min. :1.000 Min. :1.000 ## 1st Qu.:1.000 1st Qu.: 5.000 1st Qu.:1.000 1st Qu.:3.000 ## Median :1.000 Median : 6.000 Median :2.000 Median :4.000 ## Mean :1.378 Mean : 6.037 Mean :1.795 Mean :3.576 ## 3rd Qu.:2.000 3rd Qu.: 7.000 3rd Qu.:2.000 3rd Qu.:4.000 ## Max. :4.000 Max. :10.000 Max. :4.000 Max. :4.000 ## ## wealth health sex age area ## Min. : 0.000 Min. :1.000 남성:4011 Length:8000 경기 :1103 ## 1st Qu.: 4.000 1st Qu.:3.000 여성:3989 Class :character 서울 : 965 ## Median : 5.000 Median :4.000 Mode :character 부산 : 539 ## Mean : 4.985 Mean :3.696 경남 : 527 ## 3rd Qu.: 6.000 3rd Qu.:4.000 인천 : 522 ## Max. :10.000 Max. :5.000 경북 : 466 ## (Other):3878 #성별 빈도분석 12345mental %&gt;% group_by(sex) %&gt;% summarise(n=n()) %&gt;% #sex 변수의 범주별 빈도 구하기 mutate(total=sum(n), pct=round(n/total*100,1)) 12345## # A tibble: 2 × 4## sex n total pct## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;## 1 남성 4011 8000 50.1## 2 여성 3989 8000 49.9 #연령대별 빈도분석 12345mental %&gt;% group_by(age) %&gt;% summarise(n=n()) %&gt;% mutate(total=sum(n), pct=round(n/total*100,1)) 12345678## # A tibble: 5 × 4## age n total pct## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;## 1 2 1516 8000 19 ## 2 20대 1542 8000 19.3## 3 3 1769 8000 22.1## 4 4 1821 8000 22.8## 5 5 1352 8000 16.9 #성과 연령대의 교차 빈도 구하기 1table(mental$sex,mental$age) 1234## ## 2 20대 3 4 5## 남성 745 822 900 891 653## 여성 771 720 869 930 699 #성과 연령대의 교차 백분율 구하기, 행별로 100%기준.소수점 한자리 1round(prop.table(table(mental$sex,mental$age),1)*100,1) 1234## ## 2 20대 3 4 5## 남성 18.6 20.5 22.4 22.2 16.3## 여성 19.3 18.0 21.8 23.3 17.5 #교차분석 검정 1chisq.test(mental$sex,mental$age) 12345## ## Pearson's Chi-squared test## ## data: mental$sex and mental$age## X-squared = 10.076, df = 4, p-value = 0.03916 #p&lt;0.05이므로 연령대 분포 비율은 다소 차이가 있다. #suicide, satisfaction, loneliness, family_belif, wealth,health 변수의 평균을 분석한다. 12mental %&gt;% summarise(m1=mean(suicide), m2=mean(satisfaction),m3=mean(loneliness),m4=mean(family_belief),m5=mean(wealth),m6=mean(health)) 12## m1 m2 m3 m4 m5 m6## 1 1.377625 6.0365 1.795 3.576375 4.985125 3.696125 #자살충동은 4점 척도에서 1.38 따라서 낮은 편#삶의 만족도 6.04 보통보다 조금 위#외로움 1.8으로 상대적으로 낮은 편#가족신뢰도 높은편#경제 안정도: 보통 바로 밑#건강상태: 5점 척도에서 3.7으로 좋은 수준 #삶의 만족도와 외로움을 독립변수로 하고, 자살충동을 종속변수로 하는 다중회귀분석 12RA&lt;-lm(data=mental,suicide~satisfaction+loneliness)summary(RA) 12345678910111213141516171819## ## Call:## lm(formula = suicide ~ satisfaction + loneliness, data = mental)## ## Residuals:## Min 1Q Median 3Q Max ## -1.50517 -0.40228 -0.03487 0.17773 3.07029 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.035551 0.029823 34.72 &lt;2e-16 ***## satisfaction -0.052583 0.003614 -14.55 &lt;2e-16 ***## loneliness 0.367405 0.007987 46.00 &lt;2e-16 ***## ---## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## ## Residual standard error: 0.5451 on 7997 degrees of freedom## Multiple R-squared: 0.2668, Adjusted R-squared: 0.2666 ## F-statistic: 1455 on 2 and 7997 DF, p-value: &lt; 2.2e-16 #suicide = 1.035551-0.052583 X satisfaction + 0.367405 X loneliness #삶의 만족도와 외로움의 상관관계 1cor.test(mental$satisfaction,mental$loneliness) 1234567891011## ## Pearson's product-moment correlation## ## data: mental$satisfaction and mental$loneliness## t = -25.374, df = 7998, p-value &lt; 2.2e-16## alternative hypothesis: true correlation is not equal to 0## 95 percent confidence interval:## -0.2931116 -0.2525481## sample estimates:## cor ## -0.2729512 #가족 신뢰도, 경제안정도, 건강상태가 삶의 만족도와 외로움에 미치는 옇야 12RA&lt;-lm(data=mental, satisfaction~family_belief+wealth+health)summary(RA) 123456789101112131415161718192021## ## Call:## lm(formula = satisfaction ~ family_belief + wealth + health, ## data = mental)## ## Residuals:## Min 1Q Median 3Q Max ## -6.8274 -0.9431 -0.0425 1.0569 6.1986 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.07613 0.13765 15.08 &lt;2e-16 ***## family_belief 0.36851 0.03196 11.53 &lt;2e-16 ***## wealth 0.26016 0.01089 23.88 &lt;2e-16 ***## health 0.36403 0.02206 16.50 &lt;2e-16 ***## ---## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## ## Residual standard error: 1.627 on 7996 degrees of freedom## Multiple R-squared: 0.1386, Adjusted R-squared: 0.1383 ## F-statistic: 428.8 on 3 and 7996 DF, p-value: &lt; 2.2e-16 #3개의 독립 변수가 외로움에 미치는 영향 12RA&lt;-lm(data=mental, loneliness~family_belief+wealth+health)summary(RA) 1234567891011121314151617181920## ## Call:## lm(formula = loneliness ~ family_belief + wealth + health, data = mental)## ## Residuals:## Min 1Q Median 3Q Max ## -2.24066 -0.64247 0.01863 0.43022 2.83959 ## ## Coefficients:## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 3.652247 0.063109 57.87 &lt;2e-16 ***## family_belief -0.220274 0.014654 -15.03 &lt;2e-16 ***## wealth -0.072686 0.004995 -14.55 &lt;2e-16 ***## health -0.191313 0.010116 -18.91 &lt;2e-16 ***## ---## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1## ## Residual standard error: 0.746 on 7996 degrees of freedom## Multiple R-squared: 0.1157, Adjusted R-squared: 0.1154 ## F-statistic: 348.9 on 3 and 7996 DF, p-value: &lt; 2.2e-16 =&gt;3개의 변수 모두 유의미하다.loneliness = 3.652247 -0.220274 X family_belief - 0.072686 X wealth -0.191313 X health 성별로 삶의 만족도에서 차이가 있는가를 독립표본 t검정으로 확인1t.test(data=mental,satisfaction~sex) 1234567891011## ## Welch Two Sample t-test## ## data: satisfaction by sex## t = -3.7719, df = 7997.6, p-value = 0.0001632## alternative hypothesis: true difference in means between group 남성 and group 여성 is not equal to 0## 95 percent confidence interval:## -0.22446298 -0.07094075## sample estimates:## mean in group 남성 mean in group 여성 ## 5.962852 6.110554 #유의수준이 0.001보다 작기 때문에 이 통계 결과는 유의미하다.여성의 만족도가 남성보다 높다고 할 수 있다. #연령대별 삶의 만족도 차이 1234mental %&gt;% group_by(age) %&gt;% summarise(m=mean(satisfaction)) %&gt;% arrange(desc(m)) 12345678## # A tibble: 5 × 2## age m## &lt;chr&gt; &lt;dbl&gt;## 1 2 6.13## 2 4 6.08## 3 3 6.05## 4 20대 6.04## 5 5 5.84 #30대가 6.13으로 가장 높다. #지역별 삶의 만족도 분석과 그래프 그리기 1234area_satisfaction&lt;-mental %&gt;% group_by(area) %&gt;% summarise(m=mean(satisfaction)) %&gt;% arrange(desc(m)) 123456ggplot(data=area_satisfaction,aes(x=reorder(area,m),y=m))+ geom_col()+ ggtitle(&quot;지역별 만족도&quot;)+ xlab(&quot;지역&quot;)+ ylab(&quot;만족도&quot;)+ coord_flip()","link":"/2022/06/24/day0624/"},{"title":"","text":"1 ##제목1-파이썬 입문 ###소제목 1-여기는 소제목입니다. 1print(&quot;Hello World&quot;) Hello World 제목2-제목2섹션 ###소제목2 12a1=10print(a1) 10 ##제목3-여기는 제목3입니다. 1print(&quot;hellol&quot;) hellol 1","link":"/2022/06/27/basic0627/"},{"title":"","text":"title:”Python 기초문법”date:’2022-06-27’ 1 -Hello World 1print(&quot;Hello World&quot;) Hello World ##주석 처리-1줄 주석 -여러 줄 주석 처리 함수 또는 클래스를 문서화 할 때 주로 사용 -프로젝트 할 때 전체 공정 100 코드 / 코드 문서화/ 한글작업 문서화 123456#print() 함수 사용# print(&quot;1줄 주석&quot;)&quot;&quot;&quot;print(&quot;hello&quot;)&quot;&quot;&quot;print(&quot;hello&quot;) hello 변수-자료형 -스칼라형,non스칼라형 수치형 자료형 int,float 123num_int =1print(num_int)print(type(num_int)) 1 &lt;class 'int'&gt; 123num_float=0.1print(num_float)print(type(num_float)) 0.1 &lt;class 'float'&gt; Bool형-True,False -R: TRUE,FALSE 123bool_true =Trueprint(bool_true)print(type(bool_true)) True &lt;class 'bool'&gt; None 자료형-Null값, 값이 정해지지 않은 자료형 123none_x=Noneprint(none_x)print(type(none_x)) None &lt;class 'NoneType'&gt; 사칙연산정수형 사칙연산, 실수형 사칙연산 정수형 사칙연산, 실수형 사칙연산 결과값의 자료형 +,-,*,/ 123456a=3b=2print('a + b = ',a+b)print('a - b = ',a-b)print('a * b = ',a*b)print('a / b = ',a/b) a + b = 5 a - b = 1 a * b = 6 a / b = 1.5 123456a=1.5b=2.5print('a + b = ',a+b)print('a - b = ',a-b)print('a * b = ',a*b)print('a / b = ',a/b) a + b = 4.0 a - b = -1.0 a * b = 3.75 a / b = 0.6 ##논리형 연산자 Bool형 True와 False 값으로 정의 조건식 *교집합(and), 합집합(or) 12345678print(True and True)print(True and False)print(False and True)print(False and False)print(True or True)print(True or False)print(False or True)print(False or False) True False False False True True True False ##비교 연산자 비교 연산자는 부등호를 의미한다. 12345print(4&gt;3)print(4&lt;3)a=4&gt;3print(a)print(4&gt;3 and 3&gt;4) True False True False 논리형 &amp;비교 연산자 응용 input() 형변환 데이터 타입을 바꾸는 것 123var=int (input(&quot;숫자를 입력하세요&quot;))print(var)print(type(var)) 숫자를 입력하세요1 1 &lt;class 'int'&gt; 123456num1= int(input(&quot;첫번째 숫자를 입력하세요&quot;))num2= int(input(&quot;두번째 숫자를 입력하세요&quot;))num3= int(input(&quot;세번째 숫자를 입력하세요&quot;))num4= int(input(&quot;네번째 숫자를 입력하세요&quot;)) 첫번째 숫자를 입력하세요100 두번째 숫자를 입력하세요200 세번째 숫자를 입력하세요12 네번째 숫자를 입력하세요150 12var1=num1&gt;=num2var2=num3&lt;num4 1print(var1 and var2) False ##Stirng Non Scalar 1234print('Hello World')print(&quot;Hello World&quot;)print('&quot;Hello World&quot;')print(&quot;'Hello World'&quot;) Hello World Hello World &quot;Hello World&quot; String Operators 문자열 연산자 +,* 가능 1234str1=&quot;Hello &quot;str2=&quot;World&quot;print(str1 + str2) Hello World 12greet = str1 + str2print(greet *2) Hello WorldHello World 12multiline = &quot;Life is too short\\nYou need python&quot;print(multiline) Life is too short You need python 123head =&quot;Python&quot;tail=&quot; is fun!&quot;head+tail 'Python is fun!' 12a=&quot;Life is too short, You need Python&quot;a[0:4] 'Life' 123456a=&quot;20220627Rainy&quot;date=a[:8]weather= a[8:]dateweather 'Rainy' 12number=3&quot;I eat {} apples&quot;.format(number) 'I eat 3 apples' 1234nubmer=10day=&quot;three &quot;&quot;I ate {} apples. So I was sick for {}days&quot;.format(number,day) 'I ate 3 apples. So I was sick for three dyas' 1&quot;I ate {0} apples. so I was sick for {day} days&quot;. format(10,day=3) 'I ate 10 apples. so I was sick for 3 days' ##문자 개수 세기 12a=&quot;hobby&quot;a.count('b') 2 위치 알려주기12a=&quot;Life is too short&quot;a.index('t') 8 , 삽입하기1&quot;,&quot;.join('abcd') 'a,b,c,d' 12a=&quot;Life is too short&quot;a.replace(&quot;Life&quot;,&quot;Your leg&quot;) 'Your leg is too short' 1234a=[1,2,3,['a','b','c']]a[0]a[3]a[3][0] 'a' 1234a=[1,2,3]b=[4,5,6]a+b [1, 2, 3, 4, 5, 6] 12a=[1,2,3]len(a) 3 123a=[1,2,3,4,5]del a[2:]a [1, 2] 123a=[1,2,3]a.append(4)a [1, 2, 3, 4] 123a=[1,2,3]a.append([5,6])a [1, 2, 3, [5, 6]] 1234a=[1,2,3]a.insert(0,4)a [4, 1, 2, 3] 123t1=(1,2,'a','b')t1[0]t1[3] 'b' 123t1=(1,2,'a','b')t2=(3,4)t1+t2 (1, 2, 'a', 'b', 3, 4) 123a={'name':'김승욱','phone':'01096270326','birth':'0323'}a.get('name')a.get('phone') '01096270326' 12s1=set([1,2,3])s1 {1, 2, 3} 12s2=set(&quot;Hello&quot;)s2 {'H', 'e', 'l', 'o'} 123s1=set([1,2,3])l1=list(s1)l1 [1, 2, 3] 12a=[1,2,3]id(a) 140084781446080 ##Q1 1234567a=80b=75c=55add=80+75+55mean=add/3mean 70.0 ##Q2 12345a=13if(a%2==0): print(&quot;짝수다&quot;)else: print(&quot;홀수다&quot;) 홀수다 ##Q3 123a=&quot;881120-1068234&quot;print(&quot;19&quot;+a[:2])print(a[2:6]) 1988 1120 ##Q4 123a=&quot;a:b:c:d&quot;a.replace(&quot;:&quot;,&quot;#&quot;) 'a#b#c#d' ##Q5 123456pin=&quot;881120-1068234&quot;if(pin[7]=='1'): print(&quot;남자다&quot;)else: print(&quot;여자다&quot;) 남자다 ##Q6 1234a=[1,3,5,4,2]a.sort()a.reverse()a [5, 4, 3, 2, 1] ##Q7 12a=['Life', 'is', 'too','short']&quot; &quot;.join(a) 'Life is too short' ##Q8 1234a=[1,2,3]a.insert(0,4)a [4, 1, 2, 3] ##슬라이싱 12greeting=&quot;Hello Kaggle&quot;print(greeting[:5]) Hello ##Q9 1234a=dict()b=dict()c=dict()d=dict() 12a['name']='python'a {'name': 'python'} 12b[('b,')]='python'b {'b,': 'python'} 12d[250]='python'd {250: 'python'} ##Q10 123a={'A':90, 'B':80,'C':70}aa['B'] 80 ##Q11 1234a=[1,1,1,2,2,3,3,3,4,4,5]a1=set(a)a2=list(a1)a2 [1, 2, 3, 4, 5] ##Q12 123a=b=[1,2,3]a[1]=4print(b) [1, 4, 3] 12345from copy import copya=[1,2,3]b=copy(a)a[1]=4b [1, 2, 3] if문12345pocket = ['paper','cellphone', 'money']if 'money' in pocket: print(&quot;택시 타라&quot;)else: print(&quot;걸어가라&quot;) 택시 타라 if elif else12345678pocket=['paper','cellphone']card=bool_trueif 'money' in pocket: print(&quot;택시 타라&quot;)elif card: print(&quot; 택시 타라&quot;)else: print(&quot;걸어가라&quot;) 택시 타라 ##while 1234567treehit=0while treehit &lt; 10: treehit= treehit +1 print(&quot;나무를 %d 번 찍었습니다.&quot;%treehit) if treehit ==10: print(&quot;나무가 넘어간다&quot;) 나무를 1 번 찍었습니다. 나무를 2 번 찍었습니다. 나무를 3 번 찍었습니다. 나무를 4 번 찍었습니다. 나무를 5 번 찍었습니다. 나무를 6 번 찍었습니다. 나무를 7 번 찍었습니다. 나무를 8 번 찍었습니다. 나무를 9 번 찍었습니다. 나무를 10 번 찍었습니다. 나무가 넘어간다 12345678910prompt=&quot;&quot;&quot; 1. add 2. del 3. list 4. quit enter number:&quot;&quot;&quot; 1234number=0while number!=4: print(prompt) number = int(input()) 1. add 2. del 3. list 4. quit enter number: 4 While문 강제로 빠져나가기123456789101112131415coffee =10while True: money = int(input(&quot;돈을 넣어라&quot;)) if money ==300: print(&quot;커피를 줍니다.&quot;) coffee = coffee -1 elif money&gt;300: print(&quot;거스름돈 %d를 주고 커피를 줍니다.&quot;%(money -300)) coffee-=1 else: print(&quot;안줘 ㅎ&quot;) if coffee==0: print(&quot;커피 없다 돌아가라&quot;) break 돈을 넣어라500 거스름돈 200를 주고 커피를 줍니다. 돈을 넣어라100 안줘 ㅎ 돈을 넣어라300 커피를 줍니다. 돈을 넣어라300 커피를 줍니다. 돈을 넣어라300 커피를 줍니다. 돈을 넣어라300 커피를 줍니다. 돈을 넣어라300 커피를 줍니다. 돈을 넣어라300 커피를 줍니다. 돈을 넣어라540 거스름돈 240를 주고 커피를 줍니다. 돈을 넣어라320 거스름돈 20를 주고 커피를 줍니다. 돈을 넣어라532 거스름돈 232를 주고 커피를 줍니다. 커피 없다 돌아가라 12345678a=[1,2,3,4,5]rem = a.pop(1)print(a)print(rem)rem=a.pop()print(a)print(rem) [1, 3, 4, 5] 2 [1, 3, 4] 5 clear(): 리스트 내 모든 값 삭제 index(“값”) : 값의 위치를 불러옴 1234a=[1,2,3,4,5]b=[&quot;철수&quot;,&quot;영희&quot;,&quot;길동&quot;]print(a.index(4))print(b.index(&quot;길동&quot;)) 3 2 while문의 맨 처음으로 돌아가기12345678a=0b=100while a&lt;10: a=a+1 if a%2==0: continue print(a) print(b) 1 100 3 100 5 100 7 100 9 100 12345678a=0b=100while a&lt;10: a=a+1 if a%2==0: break; print(a) 1 123test_list = ['one', 'two','three']for i in test_list: print(i) one two three ##튜플 1234567tuple1=(0)tuple2=(0,)tuple3=0,1,2print(type(tuple1))print(type(tuple2))print(type(tuple3)) &lt;class 'int'&gt; &lt;class 'tuple'&gt; &lt;class 'tuple'&gt; 123a=[(1,2),(3,4),(5,6)]for(first,last) in a: print(first+last) 3 7 11 123456789marks=[90,25,67,45,80]number=0for mark in marks: number+=1 if mark&gt;60: print(&quot;%d번째 학생은 합격이다&quot; % number) else: print(&quot;넌 뭐했냐 %d번째야&quot; % number) 1번째 학생은 합격이다 넌 뭐했냐 2번째야 3번째 학생은 합격이다 넌 뭐했냐 4번째야 5번째 학생은 합격이다 for문과 continue12345678marks =[90,25,67,45,80]number = 0for mark in marks: number+=1 if mark &lt;60: continue print(&quot;%d 학생 합격입니다.&quot; %number) 1 학생 합격입니다. 3 학생 합격입니다. 5 학생 합격입니다. 123456789temp_dict={ 'teacher':'evan', 'class': 15, 'student': ['s1','s2','s3']}print(temp_dict[&quot;teacher&quot;])print(temp_dict['class'])print(temp_dict[&quot;student&quot;]) evan 15 ['s1', 's2', 's3'] 1list(temp_dict.keys()) ['teacher', 'class', 'student'] items() key -value 쌍으로, list와 tuple 형태로 변환 1 --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-179-7c69bfb1b247&gt; in &lt;module&gt;() ----&gt; 1 dict_items([('teacher','evan'),('class', 15),]) NameError: name 'dict_items' is not defined ##for 문과 함께 자주 사용되는 range 함수 12a = range(10)a range(0, 10) 12a=range(1,11)a range(1, 11) 1234add=0for i in range(1,11): add=add+iprint(add) 55 12345marks=[90,25,67,45,80]for number in range(len(marks)): if marks[number]&lt;60: continue print(&quot;%d번째 학생 축하하눙&quot; % (number+1)) 1번째 학생 축하하눙 3번째 학생 축하하눙 5번째 학생 축하하눙 for 와 range 함수를 이용한 구구단1234for i in range(2,10): for j in range(2,10): print(i * j, end=&quot; &quot;) print(&quot; &quot;) 4 6 8 10 12 14 16 18 6 9 12 15 18 21 24 27 8 12 16 20 24 28 32 36 10 15 20 25 30 35 40 45 12 18 24 30 36 42 48 54 14 21 28 35 42 49 56 63 16 24 32 40 48 56 64 72 18 27 36 45 54 63 72 81 12345a=[1,2,3,4]result=[]for num in a: result.append(num*3)print(result) [3, 6, 9, 12] Q1 123456789101112a=&quot;Life is too short, you need python&quot;if &quot;wife&quot; in a: print(&quot;wife&quot;)elif &quot;python&quot; in a and &quot;you&quot; not in a: print(&quot;python&quot;)elif &quot;shirt&quot; not in a: print(&quot;shirt&quot;)elif &quot;need&quot; in a: print(&quot;need&quot;)else: print(&quot;nono&quot;) shirt Q2 while 문을 사용해 1부터 1000까지의 자연수 중 3의 배수의 합을 구해라 12345sum=0for i in range(1,1000): if i%3==0: sum+=iprint(sum) 166833 Q3 while 문을 사용하여 다음과 같이 별(*)을 표시하는 프로그램을 작성해 보 12345for i in range(0,5): for j in range(0,5): if j&lt;=i: print(&quot;*&quot;,end=&quot;&quot;) print(&quot; &quot;) * ** *** **** ***** ##Q3-1 7X7모양에서 다이아몬드 모양을 만들어봐라 1234for i in range(5): print(' '*(4-i)+'*'*(2*i-1))for i in range(4): print(' '+' '*i+'*'*(5-2*i)) * *** ***** ******* ***** *** * ##Q4 for 문을 사용해 1부터 100까지의 숫자를 출력해봐 12for i in range(1,101): print(i) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 ##Q5 A학급에 총 10명의 학생이 있다. 이 학생들의 중간고사 점수는 다음과 같다.[70,60,55,75,95,90,80,80,85,100]for 문을 사용하여 A학급의 평균 점수를 구해 123456sum=0a=[70,60,55,75,95,90,80,80,85,100]for i in range(len(a)): sum+=a[i]sum/len(a) 79.0 ##Q6리스트 중에서 홀수에만 2를 곱하여 저장하는 다음 코드가 있다.numbers = [1, 2, 3, 4, 5]result = []for n in numbers: if n % 2 == 1: result.append(n*2)위 코드를 리스트 내포(list comprehension)를 사용하여 표현해 봐라 123numbers = [1, 2, 3, 4, 5]result = [n*2 for n in numbers if n%2==1]print(result) [2, 6, 10] 12345a=&quot;Kaggle&quot;for x in a: if x=='g': break; print(x) K a 123alphabets=['A','B','C']for index, value in enumerate(alphabets): print(index,value) 0 A 1 B 2 C","link":"/2022/06/27/day0627/"},{"title":"","text":"반복문 복습 for loop and while loop 123456a = &quot;Kaggle&quot;for i in a: if i==&quot;a&quot;: break; 리스트 1234567numbers = [1,2,3,4,5]sum=0for num in numbers: sum+=numprint(sum) 15 12345678fruits=['apple','kiwi', 'mango']newlist =[]for fruit in fruits: if &quot;a&quot; in fruit: newlist.append(fruit)print(newlist) ['apple', 'mango'] 12345a=[1,2,3]b=ab[1]=9print(a)print(b) [1, 9, 3] [1, 9, 3] 사용자 정의 함수 내가 필요에 의해 직접 함수를 작성 123def 함수명(param1, param2): #코드 return None 12345678910111213141516def add(a=0,b=1): &quot;&quot;&quot;a,b를 더하는 함수 Parameters: a(int): int형 숫자 a입력 b(int): int형 숫자 b입력 return: int:반환값 &quot;&quot;&quot; c=a+b return cprint(add(5,4))print(add.__doc__) 9 a,b를 더하는 함수 Parameters: a(int): int형 숫자 a입력 b(int): int형 숫자 b입력 return: int:반환값 1234567891011121314151617181920212223def add(a,b): c=a+b return cdef minus(a,b): c=a-b return cdef multi(a,b): c=a*b return cdef divide(a,b): c=a/b return cprint(add(4,5))print(minus(4,5))print(multi(4,5))print(divide(4,5)) 9 -1 20 0.8 여러개의 변수를 받을 때123456789def add_many(*args): result = 0 for i in args: result = result +i print(type(result)) return result add_many(1,2,3,4,5,5,6,8,89) &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; &lt;class 'int'&gt; 123 1234567a=1def vartest(a): a+=1 return aa=vartest(a)print(a) 2 1234567a=1def vartest(): global a a = a+1vartest()print(a) 2 함수 문서화 키워드: Docstinrg 123456789class Calculator: def __init__self(self): self.result =0 def add(self, num): self.result += num return self. result 123456789import numpy as npA=[1,2,3]B=[4,5,6]np_A = np.array(A)np_B = np.array(B)np_A / np_B ** 2 array([0.0625 , 0.08 , 0.08333333]) NumPy 내장모듈(=라이브러리 = 패키지)(X) 별도 라이브러리 설치 12import numpy as npprint(np.__version__) 1.21.6 12345temp=[1,2,3]temp_array = np.array(temp)print(type(temp))print(type(temp_array)) # 배열로 변환이 되었다는 것을 의미한다. &lt;class 'list'&gt; &lt;class 'numpy.ndarray'&gt; 123456789math_score=[90,80,100]eng_score=[80,90,100]print(math_score + eng_score)np_math = np.array(math_score)np_eng = np.array(eng_score)total = np_math + np_engprint(total)print(type(total)) [90, 80, 100, 80, 90, 100] [170 170 200] &lt;class 'numpy.ndarray'&gt; 집계 함수123print(np.min(total))print(np.max(total))print(np.sum(total)) 170 200 540 차원 배열의 차원 확인 필요 1234# 1차원 배열temp_arr = np.array([1,2,3])print(temp_arr.shape) #값이 3개print(temp_arr.ndim) #1차원 (3,) 1 12345# 2차원 배열temp_arr=np.array([[1,2,3],[4,5,6]])print(temp_arr.shape) #2*3배열print(temp_arr.ndim) #2차원print(temp_arr) (2, 3) 2 [[1 2 3] [4 5 6]] 12345# 3차원 배열 -&gt; 이미지temp_arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])print(temp_arr.shape)print(temp_arr.ndim)print(temp_arr) (2, 2, 3) 3 [[[ 1 2 3] [ 4 5 6]] [[ 7 8 9] [10 11 12]]] 배열 생성의 다양한 방법들 모두 0으로 채운다 12import numpy as npprint(np.__version__) 1.21.6 12temp_arr= np.zeros((2,3))temp_arr array([[0., 0., 0.], [0., 0., 0.]]) 모두 1로 채운다 12temp_arr = np.ones((2,3))temp_arr array([[1., 1., 1.], [1., 1., 1.]]) 임의의 상수값으로 채운다 12temp_arr = np.full((3,3),5)temp_arr array([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) 최소, 최대 숫자의 범위를 정해두고, 각구간별로 값을 생성 12temp_arr = np.linspace(5,10,10)temp_arr array([ 5. , 5.55555556, 6.11111111, 6.66666667, 7.22222222, 7.77777778, 8.33333333, 8.88888889, 9.44444444, 10. ]) 반복문 시 , 자주 등장하는 배 12temp_arr = np.arange(1,11,1)temp_arr array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) 난수 생성123from numpy import randomx=random.rand()print(x) 0.4197892844762233 123import numpyx= numpy.random.rand()print(x) 0.8489952461394101 랜덤 정수값 추123from numpy import randomx= random.randint(100, size=(90))print(x) [65 20 95 55 13 39 19 56 8 26 44 23 59 6 32 97 87 18 42 55 28 98 2 69 68 8 58 20 8 76 4 68 6 97 42 83 34 92 10 16 59 79 57 16 41 75 65 51 99 54 88 17 94 50 1 83 37 64 78 72 50 93 64 84 36 40 98 99 11 66 39 54 43 65 38 31 98 36 35 71 78 11 1 99 57 87 47 50 25 53] 랜덤 배열 ,실수1234from numpy import randomx = random.rand(2,5)print(x)type(x) [[0.10636109 0.39654714 0.98230141 0.68008412 0.45948323] [0.02152314 0.53716145 0.87837662 0.02882575 0.8048422 ]] numpy.ndarray numpy 사칙 연1234import numpy as nparray_01 = np.array([1,2,3])array_02 = np.array([10,20,30]) 123456789101112newArr = np.add(array_01,array_02)print(newArr)newArr = np.subtract(array_01,array_02)print(newArr)newArr = np.multiply(array_01,array_02)print(newArr)newArr = np.divide(array_01,array_02)print(newArr)array_01 = np.array([1,2,3])array_02 = np.array([2,2,2])newArr = np.power(array_01,array_02)print(newArr) [3 4 5] [-1 0 1] [2 4 6] [0.5 1. 1.5] [1 4 9] ##소수점 정렬 소수점을 정렬하는 다양한 방법 123456import numpy as nptemp_arr = np.trunc([-1,23,123])print(temp_arr)temp_arr = np.fix([-1.23,1.23])print(temp_arr) [ -1. 23. 123.] [-1. 1.] 12temp_arr = np.floor([-1.2124,1.24242])print(temp_arr) [-2. 1.] 12temp_arr = np.ceil([-1.23123,1.23123])print(temp_arr) [-1. 2.] 조건식 pandas numpy 조건식 하나의 조건식 다중 조건 12temp_arr = np.arange(10)temp_arr array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 12345# 5보다 작으면 원 값 유지# 5보다 크면 곱하기 10을 해주기# np.where(조건식, 참일 때, 거짓일 때)np.where (temp_arr&lt;5, temp_arr, temp_arr * 10) array([ 0, 1, 2, 3, 4, 50, 60, 70, 80, 90]) 12345temp_arr = np.arange(10)cond_list = [temp_arr &gt; 5, temp_arr &lt; 2]choice_list = [temp_arr *2 , temp_arr +100]# np.select(조건식 리스트, 결과값 리스트, default)np.select(cond_list,choice_list,default=temp_arr) array([100, 101, 2, 3, 4, 5, 12, 14, 16, 18]) Reshape 배열의 차원 또는 크기를 바꾼다. 곱셈 1234import numpy as nptemp_array = np.ones((3,4))print(temp_array.shape)print(temp_array) (3, 4) [[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]] 1234after_reshape = temp_array.reshape(2,-1) #-1을 넣으면 알아서 계산해준다# -1넣으면 알아서 계산해준다print(after_reshape.shape)print(after_reshape) (2, 6) [[1. 1. 1. 1. 1. 1.] [1. 1. 1. 1. 1. 1.]] def 함수이름(매개변수): return 반환값1, 반환값2 123456def add_sub(a,b): return a+b,a-bx,y=add_sub(20,15)print(x)print(y) 35 5 12345678def one_two(): return [1,2]x,y=one_two()print(x)print(y)print(type(x))print(type(y)) 1 2 &lt;class 'int'&gt; &lt;class 'int'&gt; 1234567x=10y=3def get_quotient_remainder(x,y): return x//y,x%yquotient, remainder = get_quotient_remainder(x,y)print('몫 : {0}, 나머지: {1}'.format(quotient, remainder)) 몫 : 3, 나머지: 1 pandas 튜토리12import pandas as pdprint(pd.__version__) 1.3.5 12345678temp_dict = { 'col1': [1,2], 'col2': [3,4]}df= pd.DataFrame(temp_dict)print(df)print(type(df)) col1 col2 0 1 3 1 2 4 &lt;class 'pandas.core.frame.DataFrame'&gt; 12from google.colab import drivedrive.mount('/content/drive') Mounted at /content/drive 12345DATA_PATH = '/content/drive/MyDrive/Colab Notebooks/human_ai/Basic/Chapter 3. pandas/data/'lemonade = pd.read_csv(DATA_PATH +'Lemonade2016.csv')# covid_df = pd.read_csv(DATA_PATH +)lemonade.info() &lt;class 'pandas.core.frame.DataFrame'&gt; RangeIndex: 32 entries, 0 to 31 Data columns (total 7 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Date 31 non-null object 1 Location 32 non-null object 2 Lemon 32 non-null int64 3 Orange 32 non-null int64 4 Temperature 32 non-null int64 5 Leaflets 31 non-null float64 6 Price 32 non-null float64 dtypes: float64(2), int64(3), object(2) memory usage: 1.9+ KB 1234import pandas as pdimport numpy as npimport matplotlib.pyplot as plt 12s = pd.Series([1,3,5, np.nan,6,8])s 0 1.0 1 3.0 2 5.0 3 NaN 4 6.0 5 8.0 dtype: float64 12dates = pd.date_range('20220627', periods=6)dates DatetimeIndex(['2022-06-27', '2022-06-28', '2022-06-29', '2022-06-30', '2022-07-01', '2022-07-02'], dtype='datetime64[ns]', freq='D') 12df = pd.DataFrame(np.random.randn(6,4), index =dates, columns = list('ABCD'))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2022-06-27 -0.187705 0.396903 -1.553965 -0.920126 2022-06-28 -0.540548 0.040966 0.018852 2.159429 2022-06-29 0.124971 -0.000083 0.941922 0.743876 2022-06-30 0.451639 -0.763349 0.825701 0.030078 2022-07-01 -0.299505 -0.354058 -0.696545 0.062945 2022-07-02 -0.607932 -0.133409 0.707404 1.150122 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-5b526fe9-b6e7-4251-b812-301488a5a15a button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-5b526fe9-b6e7-4251-b812-301488a5a15a'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 12345678df2 = pd.DataFrame({'A':1., 'B': pd.Timestamp('20220627'), 'C': pd.Series(1,index = list(range(4)),dtype='float32'), 'D': np.array([3] * 4, dtype = 'int32'), 'E': pd.Categorical([&quot;test&quot;,&quot;train&quot;,&quot;test&quot;,&quot;train&quot;]), 'F': 'foo'})print(df2)print(df2.dtypes) A B C D E F 0 1.0 2022-06-27 1.0 3 test foo 1 1.0 2022-06-27 1.0 3 train foo 2 1.0 2022-06-27 1.0 3 test foo 3 1.0 2022-06-27 1.0 3 train foo A float64 B datetime64[ns] C float32 D int32 E category F object dtype: object 1df.tail(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2022-06-30 0.451639 -0.763349 0.825701 0.030078 2022-07-01 -0.299505 -0.354058 -0.696545 0.062945 2022-07-02 -0.607932 -0.133409 0.707404 1.150122 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-591ec042-efb3-4358-95b3-45eef8a50055 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-591ec042-efb3-4358-95b3-45eef8a50055'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.tail() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2022-06-28 -0.540548 0.040966 0.018852 2.159429 2022-06-29 0.124971 -0.000083 0.941922 0.743876 2022-06-30 0.451639 -0.763349 0.825701 0.030078 2022-07-01 -0.299505 -0.354058 -0.696545 0.062945 2022-07-02 -0.607932 -0.133409 0.707404 1.150122 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-cc8cacd2-9f16-4f17-a329-22f032213765 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-cc8cacd2-9f16-4f17-a329-22f032213765'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt; 1df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 2022-06-27 -0.187705 0.396903 -1.553965 -0.920126 2022-06-28 -0.540548 0.040966 0.018852 2.159429 2022-06-29 0.124971 -0.000083 0.941922 0.743876 2022-06-30 0.451639 -0.763349 0.825701 0.030078 2022-07-01 -0.299505 -0.354058 -0.696545 0.062945 &lt;svg xmlns=”http://www.w3.org/2000/svg&quot; height=”24px”viewBox=”0 0 24 24” width=”24px”&gt; .colab-df-container { display:flex; flex-wrap:wrap; gap: 12px; } .colab-df-convert { background-color: #E8F0FE; border: none; border-radius: 50%; cursor: pointer; display: none; fill: #1967D2; height: 32px; padding: 0 0 0 0; width: 32px; } .colab-df-convert:hover { background-color: #E2EBFA; box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15); fill: #174EA6; } [theme=dark] .colab-df-convert { background-color: #3B4455; fill: #D2E3FC; } [theme=dark] .colab-df-convert:hover { background-color: #434B5C; box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15); filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3)); fill: #FFFFFF; } &lt;script&gt; const buttonEl = document.querySelector('#df-c4a00f69-5d4d-4b2b-b265-6908d0c08237 button.colab-df-convert'); buttonEl.style.display = google.colab.kernel.accessAllowed ? 'block' : 'none'; async function convertToInteractive(key) { const element = document.querySelector('#df-c4a00f69-5d4d-4b2b-b265-6908d0c08237'); const dataTable = await google.colab.kernel.invokeFunction('convertToInteractive', [key], {}); if (!dataTable) return; const docLinkHtml = 'Like what you see? Visit the ' + '&lt;a target=&quot;_blank&quot; href=https://colab.research.google.com/notebooks/data_table.ipynb&gt;data table notebook&lt;/a&gt;' + ' to learn more about interactive tables.'; element.innerHTML = ''; dataTable['output_type'] = 'display_data'; await google.colab.output.renderOutput(dataTable, element); const docLink = document.createElement('div'); docLink.innerHTML = docLinkHtml; element.appendChild(docLink); } &lt;/script&gt; &lt;/div&gt;","link":"/2022/06/28/day0628/"}],"tags":[],"categories":[]}